import matplotlib.pyplot as plt

import numpy as np
from play import final_res
from collections import deque


def plot_results(data):
    """data = [
        {"1": ["work hard", "50", "80", "3 seconds"]},
        {"2": ["work smart", "100", "90", "5 seconds"]},
        {"3": ["work smart", "300", "70", "7 seconds"]},
    ]"""
    # data = final_res()
    # Initialize empty lists to store extracted values
    if data:
        word_counts = []
        accuracies = []
        times = []

        # Iterate through the data and extract values
        for item in data:
            for key, value in item.items():
                # Extract values and convert to appropriate types
                word_count = int(value[1].strip())
                accuracy = float(value[2])
                time = float(value[3])

                # Append extracted values to the respective lists
                word_counts.append(word_count)
                accuracies.append(accuracy)
                times.append(time)

                # Append extracted values to the respective lists

                word_counts.append(word_count)
                accuracies.append(accuracy)
                times.append(time)
        # Calculate average accuracy
        avg_accuracy = sum(accuracies) / len(accuracies)
        # Create a plot
        # Create a plot
        fig, ax = plt.subplots(figsize=(10, 6))

        # Scatter plot
        sc = ax.scatter(
            word_counts,
            accuracies,
            c=times,
            cmap="viridis",
            marker="o",
            label="Data Points",
        )
        cbar = plt.colorbar(sc, label="Time (s)")

        # Line plot to connect data points
        ax.plot(
            word_counts,
            accuracies,
            linestyle="-",
            marker="o",
            color="b",
            label="Connected Line",
        )

        # Add average accuracy annotation beside the colorbar
        avg_annotation = f"Average Accuracy: {avg_accuracy:.2f}%"
        ax.annotate(
            avg_annotation,
            xy=(1.2, 0.9),
            xycoords="axes fraction",
            fontsize=12,
            color="red",
            rotation=0,
            va="center",
            bbox=dict(boxstyle="round,pad=0.3", edgecolor="red", facecolor="white"),
        )

        ax.set_xlabel("Word Count")
        ax.set_ylabel("Accuracy (%)")
        ax.set_title("Accuracy vs. Word Count")
        ax.legend()
        ax.grid(True)

        # Show the plot
        plt.tight_layout()

        plt.show()
    else:
        print("\nNo result to plot!\n")




def plot_results(data):
    if data:
        # Initialize empty lists to store extracted values
        labels = []
        word_counts = []
        accuracies = []
        times = []

        # Iterate through the data and extract values
        for item in data:
            for key, value in item.items():
                # Extract values and convert to appropriate types
                label = f"{value[0]} ({key})"
                word_count = int(value[1].strip())
                accuracy = float(value[2])
                time = float(value[3].strip("seconds"))

                # Append extracted values to the respective lists
                labels.append(label)
                word_counts.append(word_count)
                accuracies.append(accuracy)
                times.append(time)

        # Calculate average accuracy
        avg_accuracy = sum(accuracies) / len(accuracies)

        # Create a bar chart and a table
        fig, ax = plt.subplots(figsize=(14, 6))
        gs = fig.add_gridspec(1, 2, width_ratios=[3, 1])

        # Create the bar chart
        ax_bar = fig.add_subplot(gs[0])
        x = np.arange(len(labels))
        width = 0.35
        bars = ax_bar.bar(x, accuracies, width, label="Accuracy")
        ax_bar.set_xlabel("Result")
        ax_bar.set_ylabel("Accuracy (%)")
        ax_bar.set_title("Accuracy by Result")
        ax_bar.set_xticks(x)
        ax_bar.set_xticklabels(labels, rotation=45, ha="right")
        ax_bar.legend()

        # Add average accuracy annotation above the bars
        for bar in bars:
            height = bar.get_height()
            ax_bar.annotate(
                f"{height:.2f}%",
                xy=(bar.get_x() + bar.get_width() / 2, height),
                xytext=(0, 3),
                textcoords="offset points",
                ha="center",
                va="bottom",
            )

        # Create the table
        ax_table = fig.add_subplot(gs[1])
        ax_table.set_xticks([])  # Remove the x-axis ticks
        ax_table.set_yticks([])  # Remove the y-axis ticks
        cell_text = []
        for i in range(len(labels)):
            time_per_word = times[i] / word_counts[i]
            cell_text.append(
                [
                    f"{word_counts[i]}",
                    f"{times[i]:.2f} s",
                    f"{time_per_word:.2f} s/word",
                ]
            )

        table = ax_table.table(
            cellText=cell_text,
            colLabels=["Word Count", "Time (s)", "Time/Word"],
            cellLoc="center",
            loc="center",
        )

        table.auto_set_font_size(False)
        table.set_fontsize(12)
        table.scale(1, 1.5)
        # ax.xaxis.grid(False, linestyle="--", which="major", color="gray", alpha=0.7)
        plt.subplots_adjust(wspace=0, hspace=0)  # Remove the space between subplots

        plt.tight_layout()

        plt.show()
    else:
        print("\nNo result to plot!\n")


# Example usage
data = [
    {"1": ["work hard", "50", "80", "3 seconds"]},
    {"2": ["work smart", "100", "90", "5 seconds"]},
    {"3": ["work smart", "300", "70", "7 seconds"]},
]

plot_results(data)


""" database = r"C:\Users\awet0\OneDrive\ACIT\ACIT4420-1 23H Problem-solving with scripting\Project\TypingTester\text_storage.db"""